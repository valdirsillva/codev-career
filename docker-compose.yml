version: '3'
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ${FRONTEND_CONTAINER_NAME}
    ports:
      - "${FRONTEND_PORT_INTERNAL}:${FRONTEND_PORT_EXTERNAL}"
    expose:
      - "${FRONTEND_PORT_INTERNAL}"
    links:
      - backend
    env_file:
      - .env
    networks:
      - local-network
    command: npm start

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME}
    ports:
      - "${BACKEND_PORT_INTERNAL}:${BACKEND_PORT_EXTERNAL}"
    expose:
      - "${BACKEND_PORT_INTERNAL}"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - local-network
    command: npm run start:migrate:deploy

  postgres:
    image: postgres
    container_name: ${POSTGRES_CONTAINER_NAME}
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:${POSTGRES_INTERNAL_PORT}"
    expose:
      - "${POSTGRES_EXTERNAL_PORT}"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_DEFAULT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DEFAULT_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 70s
    volumes:
      - postgres:/var/lib/postgresql/data/
    networks:
      - local-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "${PGADMIN_EXTERNAL_PORT}:${PGADMIN_INTERNAL_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - local-network

networks:
  local-network:
volumes:
  postgres:
  pgadmin:


